# Importing necessary libraries

import os
import sys
import subprocess
import cv2
import numpy as np
from skimage import io, color
import matplotlib.pyplot as plt

# Installing necessary packages

subprocess.check_call([sys.executable, "-m", "pip", "install", "numpy"])
subprocess.check_call([sys.executable, "-m", "pip", "install", "opencv-python"])
subprocess.check_call([sys.executable, "-m", "pip", "install", "scikit-image"])

def cartoonify(image_path):
    # read the image
   
   original_image = cv2.imread(image_path) 
    original_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)

    # confirm that image is chosen
    if original_image is None:
        print("Can not find any image. Choose appropriate file")
        sys.exit()

    ReSized1 = cv2.resize(original_image, (960, 540))

    #converting an image to grayscale
    grayScaleImage= cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)
    ReSized2 = cv2.resize(grayScaleImage, (960, 540))

    #applying median blur to smoothen an image
    smoothGrayScale = cv2.medianBlur(grayScaleImage, 5)
    ReSized3 = cv2.resize(smoothGrayScale, (960, 540))

    #retrieving the edges for cartoon effect
    #by using thresholding technique
    getEdge = cv2.adaptiveThreshold(smoothGrayScale, 255, 
        cv2.ADAPTIVE_THRESH_MEAN_C, 
        cv2.THRESH_BINARY, 9, 9)

    ReSized4 = cv2.resize(getEdge, (960, 540))

    #applying bilateral filter to remove noise 
    #and keep edge sharp as required
    colorImage = cv2.bilateralFilter(original_image, 9, 300, 300)
    ReSized5 = cv2.resize(colorImage, (960, 540))

    #masking edged image with our "BEAUTIFY" image
    cartoonImage = cv2.bitwise_and(colorImage, colorImage, mask=getEdge)

    ReSized6 = cv2.resize(cartoonImage, (960, 540))

    # Plotting the whole transition
    images=[ReSized1, ReSized2, ReSized3, ReSized4, ReSized5, ReSized6]

    fig, axes = plt.subplots(3,2, figsize=(8,8), subplot_kw={'xticks':[], 'yticks':[]}, gridspec_kw=dict(hspace=0.1, wspace=0.1))
    for i, ax in enumerate(axes.flat):
        ax.imshow(images[i], cmap='gray')

    #saving an image using imwrite()
    newName="cartoonified_Image"
    path1 = os.path.dirname(image_path)
    extension=os.path.splitext(image_path)[1]
    path = os.path.join(path1, newName+extension)
    cv2.imwrite(path, cv2.cvtColor(ReSized6, cv2.COLOR_RGB2BGR))
    I= "Image saved by name " + newName +" at "+ path
    print(I)

# Provide the path of the image you want to cartoonify
image_path = "C:/Users/krisha/Downloads/example1project.jpg"
cartoonify(image_path)
